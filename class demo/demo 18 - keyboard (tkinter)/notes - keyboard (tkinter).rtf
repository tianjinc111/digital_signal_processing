{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww26660\viewh16580\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs24 \cf0 Keyboard Audio Control using Tkinter and Pyaudio
\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
These demos show how to use Tkinter and Pyaudio to make a GUI that controls audio via keystrokes. The audio is generated when the user presses the keyboard. \
\
In these demos we use root.update() instead of root.mainloop(). We do not need a Tkinter loop, because there is already a loop for audio.\
\
keyboard_demo_01_mainloop.py\
  Read keyboard presses using root.mainloop.\
\
keyboard_demo_02_update.py\
  Read keyboard presses using root.update.\
\
keyboard_demo_03_sin.py\
   Adjust the frequency of a sinusoid via the keyboard.\
\
keyboard_demo_04_sin.py\
   Adjust the frequency of a sinusoid via the keyboard. \
   Display frequency in GUI window.\
\
keyboard_demo_05_sin.py\
   Adjust the frequency and gain of a sinusoid via the keyboard.\
\
keyboard_demo_06_diffeq.py\
   Play a note (via difference equation) via the keyboard.\
\
\

\f0\b Create a stand-alone application\

\f1\b0 \
A Python program can be converted into a stand-alone application using pyinstaller.\
\
http://www.pyinstaller.org/\
\
One way to install pyinstaller is to type one of the following in the terminal:\
\
pip install pyinstaller\
pip3 install pyinstaller\
\
To create a stand-alone application, type one of the following in the terminal window:\
\
pyinstaller python_file.py\
pyinstaller --onefile python_file.py\
pyinstaller --onefile --windowed python_file.py\
\
}