{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww26660\viewh16580\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs24 \cf0 Tkinter and Pyaudio
\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
These demos combine Tkinter and Pyaudio. The audio is adjusted via Tkinter through buttons and sliders.\
\
In these demos we use root.update() instead of root.mainloop(). We do not need a Tkinter loop, because there is already a loop for audio.\
\
play_sine_01.py\
   Plays a sine wave by writing one sample at a time. (No Tkinter)\
\
play_sine_02_blocks.py\
   Plays a sine wave by writing the signal in blocks.  (No Tkinter)\
\
Tk_demo_01_update.py\
   This program uses root.update function in Tkinter instead of root.mainloop.\
\
Tk_demo_02_buttons.py\
   Use buttons to adjust the frequency of a sinusoid.\
\
Tk_demo_03_slider.py\
   Use a slider to adjust the frequency of a sinusoid.\
\
Tk_demo_04_slider.py\
   Use two sliders to adjust the frequency and gain of a sinusoid.}